replicaCount: 3

image:
  repository: nginx
  tag: latest

service:
  type: ClusterIP
  port: 80
  targetPort: 80

configMap:
  data:
    key1: value1
    key2: value2
    # Add more key-value pairs as needed

serviceAccount:
  name: monitoring-sa
  namespace: default
  annotations: {}
    # kubernetes.io/enforce-mountable-secrets: "true"

namespace:
  name: my-namespace
  labels:
    environment: development
    # Add more labels as needed

serviceMonitor:
  name: my-service-monitor
  labels:
    release: prometheus
  selector:
    app: my-app
  namespace: my-namespace
  endpoints:
    - port: http-metrics
      interval: 15s
    - port: additional-metrics
      interval: 30s
      path: /metrics

storageClass:
  name: standard
  provisioner: k8s.io/minikube-hostpath
  parameters:
    type: pd-standard
    fstype: ext4
  reclaimPolicy: Retain
  volumeBindingMode: Immediate
  allowVolumeExpansion: true

initContainers:
  - name: init-container
    image: busybox
    command: ['sh', '-c', 'echo "<html><body><h1>Hello, World!</h1></body></html>" > /homework/index.html']
    mountPath: /homework

webServerContainer:
  - name: web-server
    image: nginx
    ports:
      - containerPort: 80
    volumeMounts:
      - name: shared-volume
        mountPath: /homework
      - name: nginx-config
        mountPath: /etc/nginx/conf.d
      - name: homework-config
        mountPath: /homework/conf
    readinessProbe:
      exec:
        command: ["test", "-f", "/homework/index.html"]
      initialDelaySeconds: 5
      periodSeconds: 5
metricsContainer:
  - name: metrics-container
    image: curlimages/curl
    command: ['sh', '-c', 'while true; do curl -s http://localhost/metrics > /homework/metrics; sleep 60; done']
    volumeMounts:
      - name: shared-volume
        mountPath: /homework

vpc:
  name: default-network-policy
  podSelector:
    matchLabels:
      app: myapp
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              role: frontend
      ports:
        - protocol: TCP
          port: 80
  egress:
    - to:
        - podSelector:
            matchLabels:
              role: backend
      ports:
        - protocol: TCP
          port: 5432
